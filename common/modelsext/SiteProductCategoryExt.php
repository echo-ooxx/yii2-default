<?php
/**
 * Created by IntelliJ IDEA.
 * User: leezhang
 * Date: 2020/9/22
 * Time: 2:24 PM
 */

namespace common\modelsext;

use common\helpers\ArrayHelper;
use common\models\SiteProductCategory;
use common\symbol\BaseSymbol;
use yii\behaviors\TimestampBehavior;
use yii\data\ActiveDataProvider;
use yii\helpers\Json;
use Yii;

class SiteProductCategoryExt extends SiteProductCategory
{

    public $name_cn;
    public $name_en;

    public $icon_pc;
    public $icon_mobile;

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class
            ]
        ];
    }

    public function search($params){
        $query = self::find();
        $this->load($params);
        $query->andFilterWhere([
            'in','status',[BaseSymbol::STATUS_NORMAL,BaseSymbol::STATUS_DRAFT]
        ]);

        if($this->name){
            $query
                ->andFilterWhere([
                    'like','name',$this->name
                ]);
        }

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 20
            ],
            'sort' => [
                'defaultOrder' => [
                    'sort' => SORT_DESC,
                    'created_at' => SORT_DESC
                ]
            ]
        ]);

        return $dataProvider;
    }

    public function attributes()
    {
        return ArrayHelper::merge(parent::attributes(),[
            'name_cn',
            'name_en',
            'icon_pc',
            'icon_mobile'
        ]);
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(),[
            'name_cn' => '中文名',
            'name_en' => '英文名',
            'icon_pc' => '主机端图标',
            'icon_mobile' => '移动端图标'
        ]);
    }

    public function rules()
    {
        return [
            [['name_cn','name_en','src','icon_pc','icon_mobile'],'required'],
            [['sort','status'],'number'],
            ['name','string']
        ];
    }

    public function scenarios()
    {
        return ArrayHelper::merge(parent::scenarios(),[
            'create' => array_keys($this->attributes),
            'update' => array_keys($this->attributes),
            'delete' => ['status']
        ]);
    }

    public function afterValidate()
    {
        parent::afterValidate(); // TODO: Change the autogenerated stub
        $this->name = Json::encode([
            'cn' => $this->name_cn,
            'en' => $this->name_en
        ]);
        $this->icon = Json::encode([
            'pc' => $this->icon_pc,
            'mobile' => $this->icon_mobile
        ]);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        self::getTypes(true);
    }

    public static function getTypes($refresh = false){
        $key = 'products:types';
        if(!Yii::$app->cache->exists($key) || $refresh){
            $query = self::find();
            $lists = $query
                ->where([
                    'status' => BaseSymbol::STATUS_NORMAL
                ])
                ->orderBy('sort desc,created_at desc')
                ->asArray()
                ->all();
            if($lists){
                Yii::$app->cache->set($key,$lists);
            }else{
                return null;
            }
        }
        return Yii::$app->cache->get($key);
    }
}